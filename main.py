<<<<<<< HEAD
import asyncio
import logging
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from aiogram.dispatcher.router import Router

# ะะบะปััะฐะตะผ ะปะพะณะธัะพะฒะฐะฝะธะต
logging.basicConfig(level=logging.INFO)

# ะขะพะบะตะฝ ะฑะพัะฐ
API_TOKEN = "TOKEN"

# ะกะพะทะดะฐัะผ ะฑะพั ะธ ะดะธัะฟะตััะตั
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# ะัะฝะพะฒะฝะพะน ัะพััะตั
router = Router()
dp.include_router(router)

# ะฅัะฐะฝะตะฝะธะต ัะพััะพัะฝะธั ะฟะพะปัะทะพะฒะฐัะตะปะตะน
user_data = {}

# ID ะฐะดะผะธะฝะธัััะฐัะพัะฐ (ะดะปั ะฟัะธะผะตัะฐ, ะฝัะถะฝะพ ะทะฐะผะตะฝะธัั ะฝะฐ ัะตะฐะปัะฝัะน ID ะฐะดะผะธะฝะธัััะฐัะพัะฐ)
ADMIN_ID = 123456789


# ะคัะฝะบัะธั ะดะปั ะฟะพะดะบะปััะตะฝะธั ะบ ะฑะฐะทะต ะดะฐะฝะฝัั SQLite
def get_db_connection():
    conn = sqlite3.connect('tasks.db')
    conn.row_factory = sqlite3.Row  # ะะปั ะฒะพะทะฒัะฐัะฐ ัะตะทัะปััะฐัะพะฒ ะบะฐะบ ัะปะพะฒะฐัั
    return conn


# ะคัะฝะบัะธั ะดะปั ัะพะทะดะฐะฝะธั ัะฐะฑะปะธัั ะทะฐะดะฐั, ะตัะปะธ ะพะฝะฐ ะฝะต ัััะตััะฒัะตั
def create_table():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS tasks (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        name TEXT NOT NULL,
                        description TEXT,
                        assigned_to TEXT,
                        status TEXT,
                        chat_id INTEGER NOT NULL
                    )''')
    conn.commit()
    conn.close()


def save_task(name, description, assigned_to, status, chat_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("INSERT INTO tasks (name, description, assigned_to, status, chat_id) VALUES (?, ?, ?, ?, ?)",
                   (name, description, assigned_to, status, chat_id))
    conn.commit()
    conn.close()


# ะะฐะณััะถะฐะตะผ ะทะฐะดะฐัะธ ะธะท ะฑะฐะทั ะดะฐะฝะฝัั
def load_tasks(chat_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM tasks WHERE chat_id = ?", (chat_id,))
    tasks = cursor.fetchall()
    conn.close()
    return tasks


# ะะฑะฝะพะฒะปัะตะผ ััะฐััั ะทะฐะดะฐัะธ
def update_task_status(task_id, status):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("UPDATE tasks SET status = ? WHERE id = ?", (status, task_id))
    conn.commit()
    conn.close()


# ะฃะดะฐะปัะตะผ ะทะฐะดะฐัั
def delete_task(task_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("DELETE FROM tasks WHERE id = ?", (task_id,))
    conn.commit()
    conn.close()


# ะคัะฝะบัะธั ะดะปั ัะพะทะดะฐะฝะธั ะบะปะฐะฒะธะฐัััั ั ะบะฝะพะฟะบะฐะผะธ
def main_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="ะะพะฑะฐะฒะธัั ะทะฐะดะฐัั", callback_data="add_task"),
        InlineKeyboardButton(text="ะะพะผะพัั", callback_data="help"),
        InlineKeyboardButton(text="ะะฐะดะฐัะธ", callback_data="view_tasks")
    ]])
    return keyboard


def manage_tasks_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="ะฃะฟัะฐะฒะปััั ะทะฐะดะฐะฝะธัะผะธ", callback_data="manage_tasks")
    ]])
    return keyboard


def task_info_keyboard(task_id):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="ะกะผะตะฝะธัั ััะฐััั", callback_data=f"change_status_{task_id}"),
        InlineKeyboardButton(text="ะฃะดะฐะปะธัั ะทะฐะดะฐัั", callback_data=f"delete_task_{task_id}"),
        InlineKeyboardButton(text="ะะฐะทะฐะด", callback_data=f"back_to_manage_tasks_{task_id}")
    ]])
    return keyboard


# ะคัะฝะบัะธั ะดะปั ะฟัะพะฒะตัะบะธ ะฟัะฐะฒ ะดะพัััะฟะฐ


# ะคัะฝะบัะธั ะดะปั ะฟัะพะฒะตัะบะธ ะฟัะฐะฒ ะฐะดะผะธะฝะธัััะฐัะพัะฐ
# ะคัะฝะบัะธั ะดะปั ะฟัะพะฒะตัะบะธ ะฟัะฐะฒ ะฐะดะผะธะฝะธัััะฐัะพัะฐ
async def is_admin(chat_id, user_id):
    try:
        administrators = await bot.get_chat_administrators(chat_id)
        return any(admin.user.id == user_id for admin in administrators)
    except Exception as e:
        logging.error(f"Error checking admin status: {e}")
        return False

# ะะพะผะฐะฝะดะฐ /start ะดะปั ะฟัะธะฒะตัััะฒะธั
@router.message(Command(commands=["start"]))
async def start_handler(message: types.Message):
    if message.chat.type in ["group", "supergroup"]:
        await message.reply("๐ ะัะธะฒะตั! ะฏ Family Quest ะฑะพั. ะะพัะพะฒ ัะฐะฑะพัะฐัั ะฒ ะณััะฟะฟะต! ๐ฎ", reply_markup=main_keyboard())
    else:
        await message.reply("ะญัะพั ะฑะพั ัะฐะฑะพัะฐะตั ัะพะปัะบะพ ะฒ ะณััะฟะฟะฐั. ะะพะฑะฐะฒััะต ะผะตะฝั ะฒ ัะตะผะตะนะฝัะน ัะฐั!")


# ะะฑัะฐะฑะพัะบะฐ ะบะฝะพะฟะบะธ "ะะพะฑะฐะฒะธัั ะทะฐะดะฐัั"
@router.callback_query(lambda c: c.data == "add_task")
async def add_task_callback(callback_query: types.CallbackQuery):
    # ะัะพะฒะตััะตะผ, ัะฒะปัะตััั ะปะธ ะฟะพะปัะทะพะฒะฐัะตะปั ะฐะดะผะธะฝะธัััะฐัะพัะพะผ
    is_chat_admin = await is_admin(callback_query.message.chat.id, callback_query.from_user.id)

    if not is_chat_admin:
        # ะัะปะธ ะฟะพะปัะทะพะฒะฐัะตะปั ะฝะต ะฐะดะผะธะฝะธัััะฐัะพั, ัะฒะตะดะพะผะปัะตะผ ะตะณะพ
        await callback_query.message.answer(
            "โ ะฃ ะฒะฐั ะฝะตั ะฟัะฐะฒ ะดะปั ะดะพะฑะฐะฒะปะตะฝะธั ะทะฐะดะฐั. ะขะพะปัะบะพ ะฐะดะผะธะฝะธัััะฐัะพั ะผะพะถะตั ััะพ ะดะตะปะฐัั.")
        return

    # ะัะพะดะพะปะถะฐะตะผ ะฒัะฟะพะปะฝะตะฝะธะต ะดะปั ะฐะดะผะธะฝะธัััะฐัะพัะฐ
    await callback_query.message.answer("๐ง ะะฐะฟะธัะธัะต ะฝะฐะทะฒะฐะฝะธะต ะทะฐะดะฐัะธ.")
    user_data[callback_query.from_user.id] = {'step': 'name'}

# ะะพะปััะตะฝะธะต ะฝะฐะทะฒะฐะฝะธั ะทะฐะดะฐัะธ
@router.message()
async def get_task_details(message: types.Message):
    user_id = message.from_user.id

    if user_id not in user_data:
        return  # ะัะปะธ ะฟะพะปัะทะพะฒะฐัะตะปั ะฝะต ะฝะฐัะฐะป ัะพะทะดะฐะฝะธะต ะทะฐะดะฐัะธ

    step = user_data[user_id].get('step')

    if step == 'name':  # ะญัะฐะฟ ะฟะพะปััะตะฝะธั ะฝะฐะทะฒะฐะฝะธั ะทะฐะดะฐัะธ
        user_data[user_id]['name'] = message.text.strip()
        user_data[user_id]['step'] = 'description'
        await message.answer("ะขะตะฟะตัั ะฝะฐะฟะธัะธัะต ะพะฟะธัะฐะฝะธะต ะทะฐะดะฐัะธ.")
    elif step == 'description':  # ะญัะฐะฟ ะฟะพะปััะตะฝะธั ะพะฟะธัะฐะฝะธั ะทะฐะดะฐัะธ
        user_data[user_id]['description'] = message.text.strip()
        # ะัะตะดะปะพะถะธะผ ะฒัะฑัะฐัั ะบะพะผั ะฝะฐะทะฝะฐัะธัั ะทะฐะดะฐัั
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="ะะปั ะฒัะตั ััะฐััะฝะธะบะพะฒ ะณััะฟะฟั", callback_data="assign_all"),
            InlineKeyboardButton(text="ะะปั ะบะพะฝะบัะตัะฝะพะณะพ ััะฐััะฝะธะบะฐ", callback_data="assign_user")
        ]])
        await message.answer("ะะฐะดะฐัะฐ ัะพะทะดะฐะฝะฐ! ะะพะผั ัะพัะธัะต ะตั ะฟะพัััะธัั?", reply_markup=keyboard)
        user_data[user_id]['step'] = 'assign'
    elif step == 'user_assignee':  # ะัะปะธ ััะฐะฟ ะฝะฐะทะฝะฐัะตะฝะธั ะฟะพะปัะทะพะฒะฐัะตะปั
        assignee = message.text.strip()

        # ะัะพะฒะตัะบะฐ ะฝะฐ ะบะพััะตะบัะฝัะน ัะพัะผะฐั ะฒะฒะพะดะฐ #@ะฝะธะบ
        if assignee.startswith('#@'):
            assignee = assignee[2:]  # ะฃะฑะธัะฐะตะผ #@ ะฒ ะฝะฐัะฐะปะต
            task = user_data[user_id]
            task['assigned_to'] = assignee
            task['status'] = "ะ ะฟัะพัะตััะต"  # ะกัะฐััั ะฟะพ ัะผะพะปัะฐะฝะธั
            chat_id = message.chat.id  # ะะพะปััะฐะตะผ chat_id
            # ะกะพััะฐะฝัะตะผ ะทะฐะดะฐัั ะฒ ะฑะฐะทั ะดะฐะฝะฝัั
            save_task(task['name'], task['description'], assignee, task['status'], chat_id)
            await message.answer(f"ะะฐะดะฐัะฐ '{task['name']}' ะฟะพัััะตะฝะฐ {assignee}. ะกัะฐััั: {task['status']}.")
            del user_data[user_id]  # ะฃะดะฐะปัะตะผ ะดะฐะฝะฝัะต ะฟะพะปัะทะพะฒะฐัะตะปั ะฟะพัะปะต ะฒัะฟะพะปะฝะตะฝะธั ะทะฐะดะฐัะธ
            # ะะตัะตะฑัะฐััะฒะฐะตะผ ะฒ ะณะปะฐะฒะฝะพะต ะผะตะฝั
            await message.answer("ะะฐะดะฐัะฐ ััะฟะตัะฝะพ ัะพะทะดะฐะฝะฐ! ะะตัะฝะตะผัั ะฒ ะณะปะฐะฒะฝะพะต ะผะตะฝั.", reply_markup=main_keyboard())
        else:
            await message.answer("ะะพะถะฐะปัะนััะฐ, ะฒะฒะตะดะธัะต #@ะฝะธะบ ะฟะพะปัะทะพะฒะฐัะตะปั ะฒ ะฟัะฐะฒะธะปัะฝะพะผ ัะพัะผะฐัะต.")


@router.callback_query(lambda c: c.data == "assign_user")
async def assign_user_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    # ะฃััะฐะฝะฐะฒะปะธะฒะฐะตะผ ัะฐะณ ะฝะฐ 'user_assignee', ััะพะฑั ะฑะพั ะทะฝะฐะป, ััะพ ะถะดะตะผ ะฒะฒะพะด ะฝะธะบะฐ
    user_data[user_id]['step'] = 'user_assignee'
    await callback_query.message.answer(
        "ะะฒะตะดะธัะต #@ะฝะธะบ ะฟะพะปัะทะพะฒะฐัะตะปั, ะบะพัะพัะพะผั ะฝัะถะฝะพ ะฟะพัััะธัั ะทะฐะดะฐัั. (ั ัะธะผะฒะพะปะฐะผะธ '#@')")


@router.callback_query(lambda c: c.data == "assign_all")
async def assign_all_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    task = user_data[user_id]
    task['assigned_to'] = 'all'
    task['status'] = "ะ ะฟัะพัะตััะต"  # ะกัะฐััั ะฟะพ ัะผะพะปัะฐะฝะธั
    chat_id = callback_query.message.chat.id  # ะะพะปััะฐะตะผ chat_id ะธะท ะพะฑัะตะบัะฐ ัะพะพะฑัะตะฝะธั
    save_task(task['name'], task['description'], task['assigned_to'], task['status'], chat_id)
    await callback_query.message.answer(
        f"ะะฐะดะฐัะฐ '{task['name']}' ะฟะพัััะตะฝะฐ ะฒัะตะผ ััะฐััะฝะธะบะฐะผ ะณััะฟะฟั. ะกัะฐััั: {task['status']}.")
    del user_data[user_id]
    # ะะตัะตะฑัะฐััะฒะฐะตะผ ะฒ ะณะปะฐะฒะฝะพะต ะผะตะฝั
    await callback_query.message.answer("ะะฐะดะฐัะฐ ััะฟะตัะฝะพ ัะพะทะดะฐะฝะฐ! ะะตัะฝะตะผัั ะฒ ะณะปะฐะฒะฝะพะต ะผะตะฝั.",
                                        reply_markup=main_keyboard())


@router.callback_query(lambda c: c.data == "view_tasks")
async def view_tasks(callback_query: types.CallbackQuery):
    chat_id = callback_query.message.chat.id  # ะะพะปััะฐะตะผ ID ัะตะบััะตะณะพ ัะฐัะฐ
    tasks = load_tasks(chat_id)  # ะะฐะณััะถะฐะตะผ ะทะฐะดะฐัะธ ะดะปั ััะพะณะพ ัะฐัะฐ
    if not tasks:
        await callback_query.message.answer("ะะฐ ะดะฐะฝะฝัะน ะผะพะผะตะฝั ะฝะตั ะทะฐะดะฐั.", reply_markup=main_keyboard())
        return

    task_list = ""
    for task in tasks:
        task_list += f"ะะฐะทะฒะฐะฝะธะต: {task['name']}\nะะฟะธัะฐะฝะธะต: {task['description']}\nะะพัััะตะฝะพ: {task['assigned_to']}\nะกัะฐััั: {task['status']}\n\n"

    # ะัะพะฒะตัะบะฐ, ัะฒะปัะตััั ะปะธ ะฟะพะปัะทะพะฒะฐัะตะปั ะฐะดะผะธะฝะธัััะฐัะพัะพะผ
    is_chat_admin = await is_admin(callback_query.message.chat.id, callback_query.from_user.id)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="ะฃะฟัะฐะฒะปััั", callback_data="manage_tasks") if is_chat_admin else InlineKeyboardButton(text="ะฃะฟัะฐะฒะปััั", callback_data="no_access_manage_tasks"),
        InlineKeyboardButton(text="ะะฐะทะฐะด ะฒ ะผะตะฝั", callback_data="back_to_main_menu")
    ]])

    await callback_query.message.answer(f"ะขะตะบััะธะต ะทะฐะดะฐัะธ:\n\n{task_list}", reply_markup=keyboard)

@router.callback_query(lambda c: c.data == "help")
async def add_task_callback(callback_query: types.CallbackQuery):
    await callback_query.message.answer("๐ง ะะฐ ะฟะพะผะพััั ะพะฑัะฐัะฐัััั ััะดะฐ -> https://t.me/ru_literature")


@router.callback_query(lambda c: c.data == "manage_tasks")
async def manage_tasks_callback(callback_query: types.CallbackQuery):
    # ะัะพะฒะตััะตะผ, ัะฒะปัะตััั ะปะธ ะฟะพะปัะทะพะฒะฐัะตะปั ะฐะดะผะธะฝะธัััะฐัะพัะพะผ
    is_chat_admin = await is_admin(callback_query.message.chat.id, callback_query.from_user.id)

    if not is_chat_admin:
        await callback_query.message.answer(
            "โ ะฃ ะฒะฐั ะฝะตั ะฟัะฐะฒ ะดะปั ัะฟัะฐะฒะปะตะฝะธั ะทะฐะดะฐัะฐะผะธ. ะขะพะปัะบะพ ะฐะดะผะธะฝะธัััะฐัะพั ะผะพะถะตั ััะพ ะดะตะปะฐัั.")
        return

    chat_id = callback_query.message.chat.id  # ะะพะปััะฐะตะผ ID ัะตะบััะตะณะพ ัะฐัะฐ
    tasks = load_tasks(chat_id)  # ะะฐะณััะถะฐะตะผ ะทะฐะดะฐัะธ ะดะปั ััะพะณะพ ัะฐัะฐ
    if not tasks:
        await callback_query.message.answer("ะะฐ ะดะฐะฝะฝัะน ะผะพะผะตะฝั ะฝะตั ะทะฐะดะฐั ะดะปั ัะฟัะฐะฒะปะตะฝะธั.", reply_markup=main_keyboard())
        return

    task_buttons = [
        [InlineKeyboardButton(text=task['name'], callback_data=f"task_{task['id']}") for task in tasks],
        [InlineKeyboardButton(text="ะะฐะทะฐะด ะฒ ะผะตะฝั", callback_data="back_to_main_menu")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=task_buttons)

    await callback_query.message.answer("ะัะฑะตัะธัะต ะทะฐะดะฐัั ะดะปั ัะฟัะฐะฒะปะตะฝะธั:", reply_markup=keyboard)


@router.callback_query(lambda c: c.data.startswith("task_"))
async def task_management_callback(callback_query: types.CallbackQuery):
    task_id = int(callback_query.data.split("_")[1])  # ะะทะฒะปะตะบะฐะตะผ ID ะทะฐะดะฐัะธ
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM tasks WHERE id = ?", (task_id,))
    task = cursor.fetchone()
    conn.close()

    if not task:
        await callback_query.message.answer("ะะฐะดะฐัะฐ ะฝะต ะฝะฐะนะดะตะฝะฐ.")
        return

    keyboard = task_info_keyboard(task_id)

    await callback_query.message.answer(
        f"ะะฐะดะฐัะฐ: {task['name']}\nะะฟะธัะฐะฝะธะต: {task['description']}\nะะพัััะตะฝะพ: {task['assigned_to']}\nะกัะฐััั: {task['status']}",
        reply_markup=keyboard
    )


@router.callback_query(lambda c: c.data.startswith("change_status_"))
async def change_status_callback(callback_query: types.CallbackQuery):
    # ะัะพะฒะตััะตะผ, ัะฒะปัะตััั ะปะธ ะฟะพะปัะทะพะฒะฐัะตะปั ะฐะดะผะธะฝะธัััะฐัะพัะพะผ
    is_chat_admin = await is_admin(callback_query.message.chat.id, callback_query.from_user.id)

    if not is_chat_admin:
        # ะัะปะธ ะฟะพะปัะทะพะฒะฐัะตะปั ะฝะต ะฐะดะผะธะฝะธัััะฐัะพั, ัะฒะตะดะพะผะปัะตะผ ะตะณะพ
        await callback_query.message.answer(
            "โ ะฃ ะฒะฐั ะฝะตั ะฟัะฐะฒ ะดะปั ะธะทะผะตะฝะตะฝะธั ััะฐัััะฐ ะทะฐะดะฐัะธ. ะขะพะปัะบะพ ะฐะดะผะธะฝะธัััะฐัะพั ะผะพะถะตั ััะพ ะดะตะปะฐัั.")
        return

    task_id = int(callback_query.data.split("_")[2])  # ะะทะฒะปะตะบะฐะตะผ ID ะทะฐะดะฐัะธ
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM tasks WHERE id = ?", (task_id,))
    task = cursor.fetchone()
    conn.close()

    if not task:
        await callback_query.message.answer("ะะฐะดะฐัะฐ ะฝะต ะฝะฐะนะดะตะฝะฐ.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="ะ ะฟัะพัะตััะต", callback_data=f"status_in_progress_{task_id}"),
        InlineKeyboardButton(text="ะะฐะฒะตััะตะฝะฐ", callback_data=f"status_completed_{task_id}"),
        InlineKeyboardButton(text="ะะฐะทะฐะด", callback_data=f"back_to_manage_tasks_{task_id}")
    ]])

    await callback_query.message.answer(f"ะัะฑะตัะธัะต ะฝะพะฒัะน ััะฐััั ะดะปั ะทะฐะดะฐัะธ '{task['name']}':", reply_markup=keyboard)


@router.callback_query(lambda c: c.data.startswith("status_in_progress_"))
async def status_in_progress_callback(callback_query: types.CallbackQuery):
    task_id = int(callback_query.data.split("_")[3])  # ะะทะฒะปะตะบะฐะตะผ ID ะทะฐะดะฐัะธ
    update_task_status(task_id, "ะ ะฟัะพัะตััะต")
    await callback_query.message.answer(f"ะกัะฐััั ะทะฐะดะฐัะธ ะธะทะผะตะฝะตะฝ ะฝะฐ 'ะ ะฟัะพัะตััะต'.",
                                        reply_markup=task_info_keyboard(task_id))


@router.callback_query(lambda c: c.data.startswith("status_completed_"))
async def status_completed_callback(callback_query: types.CallbackQuery):
    task_id = int(callback_query.data.split("_")[2])  # ะะทะฒะปะตะบะฐะตะผ ID ะทะฐะดะฐัะธ
    update_task_status(task_id, "ะะฐะฒะตััะตะฝะฐ")
    await callback_query.message.answer(f"ะกัะฐััั ะทะฐะดะฐัะธ ะธะทะผะตะฝะตะฝ ะฝะฐ 'ะะฐะฒะตััะตะฝะฐ'.",
                                        reply_markup=task_info_keyboard(task_id))


@router.callback_query(lambda c: c.data.startswith("back_to_manage_tasks"))
async def back_to_manage_tasks(callback_query: types.CallbackQuery):
    await manage_tasks_callback(callback_query)


@router.callback_query(lambda c: c.data.startswith("delete_task_"))
async def delete_task_callback(callback_query: types.CallbackQuery):
    # ะัะพะฒะตััะตะผ, ัะฒะปัะตััั ะปะธ ะฟะพะปัะทะพะฒะฐัะตะปั ะฐะดะผะธะฝะธัััะฐัะพัะพะผ
    is_chat_admin = await is_admin(callback_query.message.chat.id, callback_query.from_user.id)

    if not is_chat_admin:
        # ะัะปะธ ะฟะพะปัะทะพะฒะฐัะตะปั ะฝะต ะฐะดะผะธะฝะธัััะฐัะพั, ัะฒะตะดะพะผะปัะตะผ ะตะณะพ
        await callback_query.message.answer(
            "โ ะฃ ะฒะฐั ะฝะตั ะฟัะฐะฒ ะดะปั ัะดะฐะปะตะฝะธั ะทะฐะดะฐั. ะขะพะปัะบะพ ะฐะดะผะธะฝะธัััะฐัะพั ะผะพะถะตั ััะพ ะดะตะปะฐัั.")
        return

    task_id = int(callback_query.data.split("_")[2])  # ะะทะฒะปะตะบะฐะตะผ ID ะทะฐะดะฐัะธ
    delete_task(task_id)  # ะฃะดะฐะปัะตะผ ะทะฐะดะฐัั ะธะท ะฑะฐะทั ะดะฐะฝะฝัั
    await callback_query.message.answer("ะะฐะดะฐัะฐ ัะดะฐะปะตะฝะฐ.", reply_markup=main_keyboard())


@router.callback_query(lambda c: c.data == "back_to_main_menu")
async def back_to_main_menu(callback_query: types.CallbackQuery):
    await callback_query.message.answer("ะั ะฒะตัะฝัะปะธัั ะฒ ะณะปะฐะฒะฝะพะต ะผะตะฝั.", reply_markup=main_keyboard())


# ะะฐะฟััะบ ะฑะพัะฐ
async def main():
    create_table()  # ะกะพะทะดะฐะตะผ ัะฐะฑะปะธัั, ะตัะปะธ ะตั ะฝะตั
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()


if __name__ == "__main__":
=======
import asyncio
import logging
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from aiogram.dispatcher.router import Router

# ะะบะปััะฐะตะผ ะปะพะณะธัะพะฒะฐะฝะธะต
logging.basicConfig(level=logging.INFO)

# ะขะพะบะตะฝ ะฑะพัะฐ
API_TOKEN = "TOKEN"

# ะกะพะทะดะฐัะผ ะฑะพั ะธ ะดะธัะฟะตััะตั
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# ะัะฝะพะฒะฝะพะน ัะพััะตั
router = Router()
dp.include_router(router)

# ะฅัะฐะฝะตะฝะธะต ัะพััะพัะฝะธั ะฟะพะปัะทะพะฒะฐัะตะปะตะน
user_data = {}

# ID ะฐะดะผะธะฝะธัััะฐัะพัะฐ (ะดะปั ะฟัะธะผะตัะฐ, ะฝัะถะฝะพ ะทะฐะผะตะฝะธัั ะฝะฐ ัะตะฐะปัะฝัะน ID ะฐะดะผะธะฝะธัััะฐัะพัะฐ)
ADMIN_ID = 123456789


# ะคัะฝะบัะธั ะดะปั ะฟะพะดะบะปััะตะฝะธั ะบ ะฑะฐะทะต ะดะฐะฝะฝัั SQLite
def get_db_connection():
    conn = sqlite3.connect('tasks.db')
    conn.row_factory = sqlite3.Row  # ะะปั ะฒะพะทะฒัะฐัะฐ ัะตะทัะปััะฐัะพะฒ ะบะฐะบ ัะปะพะฒะฐัั
    return conn


# ะคัะฝะบัะธั ะดะปั ัะพะทะดะฐะฝะธั ัะฐะฑะปะธัั ะทะฐะดะฐั, ะตัะปะธ ะพะฝะฐ ะฝะต ัััะตััะฒัะตั
def create_table():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS tasks (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        name TEXT NOT NULL,
                        description TEXT,
                        assigned_to TEXT,
                        status TEXT,
                        chat_id INTEGER NOT NULL
                    )''')
    conn.commit()
    conn.close()


def save_task(name, description, assigned_to, status, chat_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("INSERT INTO tasks (name, description, assigned_to, status, chat_id) VALUES (?, ?, ?, ?, ?)",
                   (name, description, assigned_to, status, chat_id))
    conn.commit()
    conn.close()


# ะะฐะณััะถะฐะตะผ ะทะฐะดะฐัะธ ะธะท ะฑะฐะทั ะดะฐะฝะฝัั
def load_tasks(chat_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM tasks WHERE chat_id = ?", (chat_id,))
    tasks = cursor.fetchall()
    conn.close()
    return tasks


# ะะฑะฝะพะฒะปัะตะผ ััะฐััั ะทะฐะดะฐัะธ
def update_task_status(task_id, status):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("UPDATE tasks SET status = ? WHERE id = ?", (status, task_id))
    conn.commit()
    conn.close()


# ะฃะดะฐะปัะตะผ ะทะฐะดะฐัั
def delete_task(task_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("DELETE FROM tasks WHERE id = ?", (task_id,))
    conn.commit()
    conn.close()


# ะคัะฝะบัะธั ะดะปั ัะพะทะดะฐะฝะธั ะบะปะฐะฒะธะฐัััั ั ะบะฝะพะฟะบะฐะผะธ
def main_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="ะะพะฑะฐะฒะธัั ะทะฐะดะฐัั", callback_data="add_task"),
        InlineKeyboardButton(text="ะะพะผะพัั", callback_data="help"),
        InlineKeyboardButton(text="ะะฐะดะฐัะธ", callback_data="view_tasks")
    ]])
    return keyboard


def manage_tasks_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="ะฃะฟัะฐะฒะปััั ะทะฐะดะฐะฝะธัะผะธ", callback_data="manage_tasks")
    ]])
    return keyboard


def task_info_keyboard(task_id):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="ะกะผะตะฝะธัั ััะฐััั", callback_data=f"change_status_{task_id}"),
        InlineKeyboardButton(text="ะฃะดะฐะปะธัั ะทะฐะดะฐัั", callback_data=f"delete_task_{task_id}"),
        InlineKeyboardButton(text="ะะฐะทะฐะด", callback_data=f"back_to_manage_tasks_{task_id}")
    ]])
    return keyboard


# ะคัะฝะบัะธั ะดะปั ะฟัะพะฒะตัะบะธ ะฟัะฐะฒ ะดะพัััะฟะฐ


# ะคัะฝะบัะธั ะดะปั ะฟัะพะฒะตัะบะธ ะฟัะฐะฒ ะฐะดะผะธะฝะธัััะฐัะพัะฐ
# ะคัะฝะบัะธั ะดะปั ะฟัะพะฒะตัะบะธ ะฟัะฐะฒ ะฐะดะผะธะฝะธัััะฐัะพัะฐ
async def is_admin(chat_id, user_id):
    try:
        administrators = await bot.get_chat_administrators(chat_id)
        return any(admin.user.id == user_id for admin in administrators)
    except Exception as e:
        logging.error(f"Error checking admin status: {e}")
        return False

# ะะพะผะฐะฝะดะฐ /start ะดะปั ะฟัะธะฒะตัััะฒะธั
@router.message(Command(commands=["start"]))
async def start_handler(message: types.Message):
    if message.chat.type in ["group", "supergroup"]:
        await message.reply("๐ ะัะธะฒะตั! ะฏ Family Quest ะฑะพั. ะะพัะพะฒ ัะฐะฑะพัะฐัั ะฒ ะณััะฟะฟะต! ๐ฎ", reply_markup=main_keyboard())
    else:
        await message.reply("ะญัะพั ะฑะพั ัะฐะฑะพัะฐะตั ัะพะปัะบะพ ะฒ ะณััะฟะฟะฐั. ะะพะฑะฐะฒััะต ะผะตะฝั ะฒ ัะตะผะตะนะฝัะน ัะฐั!")


# ะะฑัะฐะฑะพัะบะฐ ะบะฝะพะฟะบะธ "ะะพะฑะฐะฒะธัั ะทะฐะดะฐัั"
@router.callback_query(lambda c: c.data == "add_task")
async def add_task_callback(callback_query: types.CallbackQuery):
    # ะัะพะฒะตััะตะผ, ัะฒะปัะตััั ะปะธ ะฟะพะปัะทะพะฒะฐัะตะปั ะฐะดะผะธะฝะธัััะฐัะพัะพะผ
    is_chat_admin = await is_admin(callback_query.message.chat.id, callback_query.from_user.id)

    if not is_chat_admin:
        # ะัะปะธ ะฟะพะปัะทะพะฒะฐัะตะปั ะฝะต ะฐะดะผะธะฝะธัััะฐัะพั, ัะฒะตะดะพะผะปัะตะผ ะตะณะพ
        await callback_query.message.answer(
            "โ ะฃ ะฒะฐั ะฝะตั ะฟัะฐะฒ ะดะปั ะดะพะฑะฐะฒะปะตะฝะธั ะทะฐะดะฐั. ะขะพะปัะบะพ ะฐะดะผะธะฝะธัััะฐัะพั ะผะพะถะตั ััะพ ะดะตะปะฐัั.")
        return

    # ะัะพะดะพะปะถะฐะตะผ ะฒัะฟะพะปะฝะตะฝะธะต ะดะปั ะฐะดะผะธะฝะธัััะฐัะพัะฐ
    await callback_query.message.answer("๐ง ะะฐะฟะธัะธัะต ะฝะฐะทะฒะฐะฝะธะต ะทะฐะดะฐัะธ.")
    user_data[callback_query.from_user.id] = {'step': 'name'}

# ะะพะปััะตะฝะธะต ะฝะฐะทะฒะฐะฝะธั ะทะฐะดะฐัะธ
@router.message()
async def get_task_details(message: types.Message):
    user_id = message.from_user.id

    if user_id not in user_data:
        return  # ะัะปะธ ะฟะพะปัะทะพะฒะฐัะตะปั ะฝะต ะฝะฐัะฐะป ัะพะทะดะฐะฝะธะต ะทะฐะดะฐัะธ

    step = user_data[user_id].get('step')

    if step == 'name':  # ะญัะฐะฟ ะฟะพะปััะตะฝะธั ะฝะฐะทะฒะฐะฝะธั ะทะฐะดะฐัะธ
        user_data[user_id]['name'] = message.text.strip()
        user_data[user_id]['step'] = 'description'
        await message.answer("ะขะตะฟะตัั ะฝะฐะฟะธัะธัะต ะพะฟะธัะฐะฝะธะต ะทะฐะดะฐัะธ.")
    elif step == 'description':  # ะญัะฐะฟ ะฟะพะปััะตะฝะธั ะพะฟะธัะฐะฝะธั ะทะฐะดะฐัะธ
        user_data[user_id]['description'] = message.text.strip()
        # ะัะตะดะปะพะถะธะผ ะฒัะฑัะฐัั ะบะพะผั ะฝะฐะทะฝะฐัะธัั ะทะฐะดะฐัั
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="ะะปั ะฒัะตั ััะฐััะฝะธะบะพะฒ ะณััะฟะฟั", callback_data="assign_all"),
            InlineKeyboardButton(text="ะะปั ะบะพะฝะบัะตัะฝะพะณะพ ััะฐััะฝะธะบะฐ", callback_data="assign_user")
        ]])
        await message.answer("ะะฐะดะฐัะฐ ัะพะทะดะฐะฝะฐ! ะะพะผั ัะพัะธัะต ะตั ะฟะพัััะธัั?", reply_markup=keyboard)
        user_data[user_id]['step'] = 'assign'
    elif step == 'user_assignee':  # ะัะปะธ ััะฐะฟ ะฝะฐะทะฝะฐัะตะฝะธั ะฟะพะปัะทะพะฒะฐัะตะปั
        assignee = message.text.strip()

        # ะัะพะฒะตัะบะฐ ะฝะฐ ะบะพััะตะบัะฝัะน ัะพัะผะฐั ะฒะฒะพะดะฐ #@ะฝะธะบ
        if assignee.startswith('#@'):
            assignee = assignee[2:]  # ะฃะฑะธัะฐะตะผ #@ ะฒ ะฝะฐัะฐะปะต
            task = user_data[user_id]
            task['assigned_to'] = assignee
            task['status'] = "ะ ะฟัะพัะตััะต"  # ะกัะฐััั ะฟะพ ัะผะพะปัะฐะฝะธั
            chat_id = message.chat.id  # ะะพะปััะฐะตะผ chat_id
            # ะกะพััะฐะฝัะตะผ ะทะฐะดะฐัั ะฒ ะฑะฐะทั ะดะฐะฝะฝัั
            save_task(task['name'], task['description'], assignee, task['status'], chat_id)
            await message.answer(f"ะะฐะดะฐัะฐ '{task['name']}' ะฟะพัััะตะฝะฐ {assignee}. ะกัะฐััั: {task['status']}.")
            del user_data[user_id]  # ะฃะดะฐะปัะตะผ ะดะฐะฝะฝัะต ะฟะพะปัะทะพะฒะฐัะตะปั ะฟะพัะปะต ะฒัะฟะพะปะฝะตะฝะธั ะทะฐะดะฐัะธ
            # ะะตัะตะฑัะฐััะฒะฐะตะผ ะฒ ะณะปะฐะฒะฝะพะต ะผะตะฝั
            await message.answer("ะะฐะดะฐัะฐ ััะฟะตัะฝะพ ัะพะทะดะฐะฝะฐ! ะะตัะฝะตะผัั ะฒ ะณะปะฐะฒะฝะพะต ะผะตะฝั.", reply_markup=main_keyboard())
        else:
            await message.answer("ะะพะถะฐะปัะนััะฐ, ะฒะฒะตะดะธัะต #@ะฝะธะบ ะฟะพะปัะทะพะฒะฐัะตะปั ะฒ ะฟัะฐะฒะธะปัะฝะพะผ ัะพัะผะฐัะต.")


@router.callback_query(lambda c: c.data == "assign_user")
async def assign_user_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    # ะฃััะฐะฝะฐะฒะปะธะฒะฐะตะผ ัะฐะณ ะฝะฐ 'user_assignee', ััะพะฑั ะฑะพั ะทะฝะฐะป, ััะพ ะถะดะตะผ ะฒะฒะพะด ะฝะธะบะฐ
    user_data[user_id]['step'] = 'user_assignee'
    await callback_query.message.answer(
        "ะะฒะตะดะธัะต #@ะฝะธะบ ะฟะพะปัะทะพะฒะฐัะตะปั, ะบะพัะพัะพะผั ะฝัะถะฝะพ ะฟะพัััะธัั ะทะฐะดะฐัั. (ั ัะธะผะฒะพะปะฐะผะธ '#@')")


@router.callback_query(lambda c: c.data == "assign_all")
async def assign_all_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    task = user_data[user_id]
    task['assigned_to'] = 'all'
    task['status'] = "ะ ะฟัะพัะตััะต"  # ะกัะฐััั ะฟะพ ัะผะพะปัะฐะฝะธั
    chat_id = callback_query.message.chat.id  # ะะพะปััะฐะตะผ chat_id ะธะท ะพะฑัะตะบัะฐ ัะพะพะฑัะตะฝะธั
    save_task(task['name'], task['description'], task['assigned_to'], task['status'], chat_id)
    await callback_query.message.answer(
        f"ะะฐะดะฐัะฐ '{task['name']}' ะฟะพัััะตะฝะฐ ะฒัะตะผ ััะฐััะฝะธะบะฐะผ ะณััะฟะฟั. ะกัะฐััั: {task['status']}.")
    del user_data[user_id]
    # ะะตัะตะฑัะฐััะฒะฐะตะผ ะฒ ะณะปะฐะฒะฝะพะต ะผะตะฝั
    await callback_query.message.answer("ะะฐะดะฐัะฐ ััะฟะตัะฝะพ ัะพะทะดะฐะฝะฐ! ะะตัะฝะตะผัั ะฒ ะณะปะฐะฒะฝะพะต ะผะตะฝั.",
                                        reply_markup=main_keyboard())


@router.callback_query(lambda c: c.data == "view_tasks")
async def view_tasks(callback_query: types.CallbackQuery):
    chat_id = callback_query.message.chat.id  # ะะพะปััะฐะตะผ ID ัะตะบััะตะณะพ ัะฐัะฐ
    tasks = load_tasks(chat_id)  # ะะฐะณััะถะฐะตะผ ะทะฐะดะฐัะธ ะดะปั ััะพะณะพ ัะฐัะฐ
    if not tasks:
        await callback_query.message.answer("ะะฐ ะดะฐะฝะฝัะน ะผะพะผะตะฝั ะฝะตั ะทะฐะดะฐั.", reply_markup=main_keyboard())
        return

    task_list = ""
    for task in tasks:
        task_list += f"ะะฐะทะฒะฐะฝะธะต: {task['name']}\nะะฟะธัะฐะฝะธะต: {task['description']}\nะะพัััะตะฝะพ: {task['assigned_to']}\nะกัะฐััั: {task['status']}\n\n"

    # ะัะพะฒะตัะบะฐ, ัะฒะปัะตััั ะปะธ ะฟะพะปัะทะพะฒะฐัะตะปั ะฐะดะผะธะฝะธัััะฐัะพัะพะผ
    is_chat_admin = await is_admin(callback_query.message.chat.id, callback_query.from_user.id)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="ะฃะฟัะฐะฒะปััั", callback_data="manage_tasks") if is_chat_admin else InlineKeyboardButton(text="ะฃะฟัะฐะฒะปััั", callback_data="no_access_manage_tasks"),
        InlineKeyboardButton(text="ะะฐะทะฐะด ะฒ ะผะตะฝั", callback_data="back_to_main_menu")
    ]])

    await callback_query.message.answer(f"ะขะตะบััะธะต ะทะฐะดะฐัะธ:\n\n{task_list}", reply_markup=keyboard)

@router.callback_query(lambda c: c.data == "help")
async def add_task_callback(callback_query: types.CallbackQuery):
    await callback_query.message.answer("๐ง ะะฐ ะฟะพะผะพััั ะพะฑัะฐัะฐัััั ััะดะฐ -> https://t.me/ru_literature")


@router.callback_query(lambda c: c.data == "manage_tasks")
async def manage_tasks_callback(callback_query: types.CallbackQuery):
    # ะัะพะฒะตััะตะผ, ัะฒะปัะตััั ะปะธ ะฟะพะปัะทะพะฒะฐัะตะปั ะฐะดะผะธะฝะธัััะฐัะพัะพะผ
    is_chat_admin = await is_admin(callback_query.message.chat.id, callback_query.from_user.id)

    if not is_chat_admin:
        await callback_query.message.answer(
            "โ ะฃ ะฒะฐั ะฝะตั ะฟัะฐะฒ ะดะปั ัะฟัะฐะฒะปะตะฝะธั ะทะฐะดะฐัะฐะผะธ. ะขะพะปัะบะพ ะฐะดะผะธะฝะธัััะฐัะพั ะผะพะถะตั ััะพ ะดะตะปะฐัั.")
        return

    chat_id = callback_query.message.chat.id  # ะะพะปััะฐะตะผ ID ัะตะบััะตะณะพ ัะฐัะฐ
    tasks = load_tasks(chat_id)  # ะะฐะณััะถะฐะตะผ ะทะฐะดะฐัะธ ะดะปั ััะพะณะพ ัะฐัะฐ
    if not tasks:
        await callback_query.message.answer("ะะฐ ะดะฐะฝะฝัะน ะผะพะผะตะฝั ะฝะตั ะทะฐะดะฐั ะดะปั ัะฟัะฐะฒะปะตะฝะธั.", reply_markup=main_keyboard())
        return

    task_buttons = [
        [InlineKeyboardButton(text=task['name'], callback_data=f"task_{task['id']}") for task in tasks],
        [InlineKeyboardButton(text="ะะฐะทะฐะด ะฒ ะผะตะฝั", callback_data="back_to_main_menu")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=task_buttons)

    await callback_query.message.answer("ะัะฑะตัะธัะต ะทะฐะดะฐัั ะดะปั ัะฟัะฐะฒะปะตะฝะธั:", reply_markup=keyboard)


@router.callback_query(lambda c: c.data.startswith("task_"))
async def task_management_callback(callback_query: types.CallbackQuery):
    task_id = int(callback_query.data.split("_")[1])  # ะะทะฒะปะตะบะฐะตะผ ID ะทะฐะดะฐัะธ
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM tasks WHERE id = ?", (task_id,))
    task = cursor.fetchone()
    conn.close()

    if not task:
        await callback_query.message.answer("ะะฐะดะฐัะฐ ะฝะต ะฝะฐะนะดะตะฝะฐ.")
        return

    keyboard = task_info_keyboard(task_id)

    await callback_query.message.answer(
        f"ะะฐะดะฐัะฐ: {task['name']}\nะะฟะธัะฐะฝะธะต: {task['description']}\nะะพัััะตะฝะพ: {task['assigned_to']}\nะกัะฐััั: {task['status']}",
        reply_markup=keyboard
    )


@router.callback_query(lambda c: c.data.startswith("change_status_"))
async def change_status_callback(callback_query: types.CallbackQuery):
    # ะัะพะฒะตััะตะผ, ัะฒะปัะตััั ะปะธ ะฟะพะปัะทะพะฒะฐัะตะปั ะฐะดะผะธะฝะธัััะฐัะพัะพะผ
    is_chat_admin = await is_admin(callback_query.message.chat.id, callback_query.from_user.id)

    if not is_chat_admin:
        # ะัะปะธ ะฟะพะปัะทะพะฒะฐัะตะปั ะฝะต ะฐะดะผะธะฝะธัััะฐัะพั, ัะฒะตะดะพะผะปัะตะผ ะตะณะพ
        await callback_query.message.answer(
            "โ ะฃ ะฒะฐั ะฝะตั ะฟัะฐะฒ ะดะปั ะธะทะผะตะฝะตะฝะธั ััะฐัััะฐ ะทะฐะดะฐัะธ. ะขะพะปัะบะพ ะฐะดะผะธะฝะธัััะฐัะพั ะผะพะถะตั ััะพ ะดะตะปะฐัั.")
        return

    task_id = int(callback_query.data.split("_")[2])  # ะะทะฒะปะตะบะฐะตะผ ID ะทะฐะดะฐัะธ
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM tasks WHERE id = ?", (task_id,))
    task = cursor.fetchone()
    conn.close()

    if not task:
        await callback_query.message.answer("ะะฐะดะฐัะฐ ะฝะต ะฝะฐะนะดะตะฝะฐ.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="ะ ะฟัะพัะตััะต", callback_data=f"status_in_progress_{task_id}"),
        InlineKeyboardButton(text="ะะฐะฒะตััะตะฝะฐ", callback_data=f"status_completed_{task_id}"),
        InlineKeyboardButton(text="ะะฐะทะฐะด", callback_data=f"back_to_manage_tasks_{task_id}")
    ]])

    await callback_query.message.answer(f"ะัะฑะตัะธัะต ะฝะพะฒัะน ััะฐััั ะดะปั ะทะฐะดะฐัะธ '{task['name']}':", reply_markup=keyboard)


@router.callback_query(lambda c: c.data.startswith("status_in_progress_"))
async def status_in_progress_callback(callback_query: types.CallbackQuery):
    task_id = int(callback_query.data.split("_")[3])  # ะะทะฒะปะตะบะฐะตะผ ID ะทะฐะดะฐัะธ
    update_task_status(task_id, "ะ ะฟัะพัะตััะต")
    await callback_query.message.answer(f"ะกัะฐััั ะทะฐะดะฐัะธ ะธะทะผะตะฝะตะฝ ะฝะฐ 'ะ ะฟัะพัะตััะต'.",
                                        reply_markup=task_info_keyboard(task_id))


@router.callback_query(lambda c: c.data.startswith("status_completed_"))
async def status_completed_callback(callback_query: types.CallbackQuery):
    task_id = int(callback_query.data.split("_")[2])  # ะะทะฒะปะตะบะฐะตะผ ID ะทะฐะดะฐัะธ
    update_task_status(task_id, "ะะฐะฒะตััะตะฝะฐ")
    await callback_query.message.answer(f"ะกัะฐััั ะทะฐะดะฐัะธ ะธะทะผะตะฝะตะฝ ะฝะฐ 'ะะฐะฒะตััะตะฝะฐ'.",
                                        reply_markup=task_info_keyboard(task_id))


@router.callback_query(lambda c: c.data.startswith("back_to_manage_tasks"))
async def back_to_manage_tasks(callback_query: types.CallbackQuery):
    await manage_tasks_callback(callback_query)


@router.callback_query(lambda c: c.data.startswith("delete_task_"))
async def delete_task_callback(callback_query: types.CallbackQuery):
    # ะัะพะฒะตััะตะผ, ัะฒะปัะตััั ะปะธ ะฟะพะปัะทะพะฒะฐัะตะปั ะฐะดะผะธะฝะธัััะฐัะพัะพะผ
    is_chat_admin = await is_admin(callback_query.message.chat.id, callback_query.from_user.id)

    if not is_chat_admin:
        # ะัะปะธ ะฟะพะปัะทะพะฒะฐัะตะปั ะฝะต ะฐะดะผะธะฝะธัััะฐัะพั, ัะฒะตะดะพะผะปัะตะผ ะตะณะพ
        await callback_query.message.answer(
            "โ ะฃ ะฒะฐั ะฝะตั ะฟัะฐะฒ ะดะปั ัะดะฐะปะตะฝะธั ะทะฐะดะฐั. ะขะพะปัะบะพ ะฐะดะผะธะฝะธัััะฐัะพั ะผะพะถะตั ััะพ ะดะตะปะฐัั.")
        return

    task_id = int(callback_query.data.split("_")[2])  # ะะทะฒะปะตะบะฐะตะผ ID ะทะฐะดะฐัะธ
    delete_task(task_id)  # ะฃะดะฐะปัะตะผ ะทะฐะดะฐัั ะธะท ะฑะฐะทั ะดะฐะฝะฝัั
    await callback_query.message.answer("ะะฐะดะฐัะฐ ัะดะฐะปะตะฝะฐ.", reply_markup=main_keyboard())


@router.callback_query(lambda c: c.data == "back_to_main_menu")
async def back_to_main_menu(callback_query: types.CallbackQuery):
    await callback_query.message.answer("ะั ะฒะตัะฝัะปะธัั ะฒ ะณะปะฐะฒะฝะพะต ะผะตะฝั.", reply_markup=main_keyboard())


# ะะฐะฟััะบ ะฑะพัะฐ
async def main():
    create_table()  # ะกะพะทะดะฐะตะผ ัะฐะฑะปะธัั, ะตัะปะธ ะตั ะฝะตั
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()


if __name__ == "__main__":
>>>>>>> ef5a72a (ะกะพััะฐะฝะตะฝะธะต ะธะทะผะตะฝะตะฝะธะน ะฒ main.py)
    asyncio.run(main())